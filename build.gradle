//http://htchttp.s3.amazonaws.com/books/Gradle%20Beyond%20the%20Basics.pdf
//https://github.com/codeborne/selenide/blob/master/build.gradle
//https://github.com/michel-kraemer/gradle-download-task
//https://github.com/colinbjohnson/snippets/blob/master/gradle/gradle_file_exists/build.gradle
//https://www.rosettacode.org/wiki/Check_that_file_exists#Groovy
//http://stackoverflow.com/questions/23288470/gradle-always-does-println-from-any-task
//http://stackoverflow.com/questions/17051140/gradle-println-prints-when-it-is-not-called

task gradle_start{
	 doFirst {println '\n\n  _-_-_-_-_-_	STARTING GR@DL3 EXECUTION   _-_-_-_-_-_	\n\n' }
}


version '1.0-SNAPSHOT'

buildscript {
	repositories 
		{ 
		jcenter() 
		// maven { url 'https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/' }
		}
	dependencies 
		{  
			classpath 'de.undercouch:gradle-download-task:3.+'
		}
  }
  


apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'de.undercouch.download'


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {

	compile 'com.google.guava:guava:19.+'		// by google - Provides vast string apis,ArrayList >Array api etc.,
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2'
	
	testCompile'org.testng:testng:6.+'
    testCompile 'org.uncommons:reportng:1.+'
    testCompile 'org.seleniumhq.selenium:selenium-java:2.+'
    testCompile 'com.google.inject:guice:3.+'
    testCompile 'velocity:velocity-dep:1.4'
    testCompile	'org.apache.poi:poi:3.14'
    testCompile 'org.apache.poi:poi-ooxml:3.14'
    
 
   //	testCompile 'org.seleniumhq.selenium:selenium-ie-driver:2.44.0'
   //	testCompile 'org.seleniumhq.selenium:selenium-chrome-driver:2.52.0'

}


import de.undercouch.gradle.tasks.download.Download

task downloadIEDriverZip(type: Download) {

   doFirst {println '\n-------------------IE initialization start------------------'}
   
  src 'https://selenium-release.storage.googleapis.com/2.53/IEDriverServer_x64_2.53.1.zip'
  dest new File(buildDir, 'IEDriverServer.zip')
  quiet false
  overwrite true
  onlyIfNewer true
  compress false
  
 doLast { println "Download IE driver: " + src + " to " + dest}
}

task downloadAndUnzipIEDriver(dependsOn: downloadIEDriverZip, type: Copy) {
   doFirst {println "Unzip IE driver: " + downloadIEDriverZip.dest}
   
  from zipTree(downloadIEDriverZip.dest)
  into buildDir
}

task ie(type: Test, dependsOn: downloadAndUnzipIEDriver) {
   doFirst {println 'Use IE driver: ' + buildDir + '/IEDriverServer.exe'}
   
  systemProperties['webdriver.ie.driver'] = new File(buildDir, 'IEDriverServer.exe')
  
 doLast { println '//---------------------------IE initialization finished ---------------\n'}
}



import org.gradle.internal.os.OperatingSystem;

task downloadChromeDriverZip(type: Download) {
 doFirst {println '\n--------------------CHROME Driver initialization start ---------------'}
 
  if (OperatingSystem.current().isMacOsX()) {
    src 'http://chromedriver.storage.googleapis.com/2.21/chromedriver_mac32.zip'
  }
  else if (OperatingSystem.current().isLinux()) {
    src 'http://chromedriver.storage.googleapis.com/2.21/chromedriver_linux64.zip'
  }
  else {
    src 'http://chromedriver.storage.googleapis.com/2.21/chromedriver_win32.zip'
  }
  dest new File(buildDir, 'chromedriver.zip')
  quiet false
  overwrite true
  onlyIfNewer true
  compress false
  
 doLast { println "Download Chrome driver: " + src + " to " + dest}
}

task downloadAndUnzipChromeDriver(dependsOn: downloadChromeDriverZip, type: Copy) {
   doFirst {println "Unzip Chrome driver: " + downloadChromeDriverZip.dest}
   
  from zipTree(downloadChromeDriverZip.dest)
  into buildDir
}

task chrome(type: Test, dependsOn: downloadAndUnzipChromeDriver) {
 doFirst {  println 'Use Chrome driver: ' + buildDir + '/chromedriver.exe'}
 
  systemProperties['webdriver.chrome.driver'] = new File(buildDir, 'chromedriver')
  
doLast {  println '//------------------------Chrome initialization finished----------------------------------\n'}
}


 println '//\n------------------------Testing Started---------------------------------'
test {

    compileTestJava {
	    options.encoding = 'UTF-8'
	    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
	}
	
	testLogging {	
		showStandardStreams = true //enable system.out in console
		testLogging.exceptionFormat = 'full'
		events "passed", "skipped", "failed", "standardError","standardOut" //enable result 
	}
	
    useTestNG {
        suites 'src/testng.xml'

        //set TestNG output dir
        outputDirectory = file("$project.buildDir//testNG_Output")

        //required to turn on TestNG reports
        useDefaultListeners = true

    }

    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
        listeners << 'com.report_generator.TestNGCustomReportListener'
    }
}

//task wrapper(type: Wrapper) {
//  gradleVersion = '2.11'
//  jarFile = './gradle-wrapper/gradle-wrapper.jar'
 // scriptFile = './gradle'
//}