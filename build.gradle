//http://htchttp.s3.amazonaws.com/books/Gradle%20Beyond%20the%20Basics.pdf
//https://github.com/codeborne/selenide/blob/master/build.gradle

task gradle_start{
println '\n\n  _-_-_-_-_-_	STARTING GR@DL3 EXECUTION   _-_-_-_-_-_	\n\n'
}


version '1.0-SNAPSHOT'

buildscript {
repositories { jcenter() }
dependencies {  classpath 'de.undercouch:gradle-download-task:2.1.0'}
  }


apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'de.undercouch.download'


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {

    testCompile('org.testng:testng:6.9.10') 						//http://mvnrepository.com/artifact/org.testng/testng/6.9.10
    testCompile 'org.uncommons:reportng:1.1.4'  					//http://mvnrepository.com/artifact/org.uncommons/reportng
    testCompile 'org.seleniumhq.selenium:selenium-java:2.52.0'   //http://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    testCompile 'com.google.inject:guice:3.0'
    testCompile 'velocity:velocity-dep:1.4'
    testCompile	'org.apache.poi:poi:3.14'
    //testCompile 'com.github.sd4324530:fastexcel:0.0.3'
    testCompile 'org.apache.poi:poi-ooxml:3.14'
    
 
   //	testCompile 'org.seleniumhq.selenium:selenium-ie-driver:2.44.0'
   //	testCompile 'org.seleniumhq.selenium:selenium-chrome-driver:2.52.0'

}


import de.undercouch.gradle.tasks.download.Download

task downloadIEDriverZip(type: Download) {

println '\n-------------------IE initialization start------------------'
  src 'http://selenium-release.storage.googleapis.com/2.52/IEDriverServer_Win32_2.52.0.zip'
  dest new File(buildDir, 'IEDriverServer.zip')
  quiet false
  overwrite true
  onlyIfNewer true
  compress false
  println "Download IE driver: " + src
}

task downloadAndUnzipIEDriver(dependsOn: downloadIEDriverZip, type: Copy) {
  println "Unzip IE driver: " + downloadIEDriverZip.dest
  from zipTree(downloadIEDriverZip.dest)
  into buildDir
}

task ie(type: Test, dependsOn: downloadAndUnzipIEDriver) {
  println 'Use IE driver: ' + buildDir + '/IEDriverServer.exe'
  systemProperties['selenide.browser'] = 'ie'
  systemProperties['webdriver.ie.driver'] = new File(buildDir, 'IEDriverServer.exe')
  systemProperties['selenide.timeout'] = '8000'
  include 'integration/**/*'
  exclude '**/AlertText.*'
  exclude '**/ConfirmTest.*'
  exclude 'com/codeborne/selenide/**/*'
  println '//---------------------------IE initialization finished ---------------\n'
}



import org.gradle.internal.os.OperatingSystem;

task downloadChromeDriverZip(type: Download) {
println '\n--------------------CHROME Driver initialization start ---------------'
  if (OperatingSystem.current().isMacOsX()) {
    src 'http://chromedriver.storage.googleapis.com/2.21/chromedriver_mac32.zip'
  }
  else if (OperatingSystem.current().isLinux()) {
    src 'http://chromedriver.storage.googleapis.com/2.21/chromedriver_linux64.zip'
  }
  else {
    src 'http://chromedriver.storage.googleapis.com/2.21/chromedriver_win32.zip'
  }
  dest new File(buildDir, 'chromedriver.zip')
  quiet false
  overwrite true
  onlyIfNewer true
  compress false
  println "Download Chrome driver: " + src + " to " + dest
}

task downloadAndUnzipChromeDriver(dependsOn: downloadChromeDriverZip, type: Copy) {
  println "Unzip Chrome driver: " + downloadChromeDriverZip.dest
  from zipTree(downloadChromeDriverZip.dest)
  into buildDir
}

task chrome(type: Test, dependsOn: downloadAndUnzipChromeDriver) {
  println 'Use Chrome driver: ' + buildDir + '/chromedriver'
  systemProperties['selenide.browser'] = 'chrome'
  systemProperties['webdriver.chrome.driver'] = new File(buildDir, 'chromedriver')
  include 'integration/**/*'
  exclude 'com/codeborne/selenide/**/*'
  println '//------------------------Chrome initialization finished----------------------------------\n'
}


 println '//\n------------------------Testing Started---------------------------------'
test {
	testLogging {
	
	showStandardStreams = true //enable system.out in console
	events "passed", "skipped", "failed", "standardOut", "standardError" //enable result
	}
	
    useTestNG {
        suites 'src/testng.xml'

        //set TestNG output dir
        outputDirectory = file("$project.buildDir//testNG_Output")

        //required to turn on TestNG reports
        useDefaultListeners = true

    }

    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
        listeners << 'com.report_generator.TestNGCustomReportListener'
    }

}

//task wrapper(type: Wrapper) {
//  gradleVersion = '2.11'
//  jarFile = './gradle-wrapper/gradle-wrapper.jar'
 // scriptFile = './gradle'
//}